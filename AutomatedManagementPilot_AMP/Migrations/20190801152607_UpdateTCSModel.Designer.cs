// <auto-generated />
using System;
using AutomatedManagementPilot_AMP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AutomatedManagementPilot_AMP.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190801152607_UpdateTCSModel")]
    partial class UpdateTCSModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AutomatedManagementPilot_AMP.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("AutomatedManagementPilot_AMP.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationId");

                    b.Property<double>("PayRoll");

                    b.Property<string>("UserName");

                    b.HasKey("EmployeeId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("AutomatedManagementPilot_AMP.Models.Machine", b =>
                {
                    b.Property<int>("MachineId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CycleTime");

                    b.Property<int>("ShopOrderNumber");

                    b.Property<decimal>("Utilization");

                    b.HasKey("MachineId");

                    b.HasIndex("ShopOrderNumber")
                        .IsUnique();

                    b.ToTable("Machine");

                    b.HasData(
                        new { MachineId = 1, CycleTime = 0m, ShopOrderNumber = 1, Utilization = 0m }
                    );
                });

            modelBuilder.Entity("AutomatedManagementPilot_AMP.Models.Manager", b =>
                {
                    b.Property<int>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationId");

                    b.Property<double>("PayRoll");

                    b.Property<string>("UserName");

                    b.HasKey("ManagerId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Manager");
                });

            modelBuilder.Entity("AutomatedManagementPilot_AMP.Models.ShopOrder", b =>
                {
                    b.Property<int>("ShopOrderNumber")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Customer");

                    b.Property<decimal>("GrossProductionRate");

                    b.Property<int>("MachineId");

                    b.Property<decimal>("NetProductionRate");

                    b.Property<TimeSpan>("OperationProductionHours");

                    b.Property<TimeSpan>("OperationSetUpHours");

                    b.Property<TimeSpan>("OperationTearDownHours");

                    b.Property<DateTime>("OrderDueDate");

                    b.Property<int>("OrderQuantity")
                        .HasMaxLength(25);

                    b.Property<DateTime>("OrderRecDate")
                        .HasMaxLength(8);

                    b.Property<string>("PartName")
                        .HasMaxLength(15);

                    b.Property<int>("PartNumber")
                        .HasMaxLength(6);

                    b.Property<decimal>("Profitability");

                    b.Property<string>("RawMatlInventoryId")
                        .HasMaxLength(250000);

                    b.Property<DateTime>("ScheduleEndTime");

                    b.Property<DateTime>("ScheduleStartTime");

                    b.HasKey("ShopOrderNumber");

                    b.ToTable("ShopOrder");

                    b.HasData(
                        new { ShopOrderNumber = 1, Customer = "Terrill Inc.", GrossProductionRate = 0m, MachineId = 1, NetProductionRate = 0m, OperationProductionHours = new TimeSpan(0, 2, 30, 0, 0), OperationSetUpHours = new TimeSpan(0, 0, 30, 0, 0), OperationTearDownHours = new TimeSpan(0, 0, 45, 0, 0), OrderDueDate = new DateTime(2019, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), OrderQuantity = 10000, OrderRecDate = new DateTime(2019, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), PartName = "Widget", PartNumber = 12345, Profitability = 0m, RawMatlInventoryId = "00277", ScheduleEndTime = new DateTime(2019, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified), ScheduleStartTime = new DateTime(2019, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { ShopOrderNumber = 2, Customer = "Bradley Industries.", GrossProductionRate = 0m, MachineId = 1, NetProductionRate = 0m, OperationProductionHours = new TimeSpan(0, 5, 30, 0, 0), OperationSetUpHours = new TimeSpan(0, 1, 0, 0, 0), OperationTearDownHours = new TimeSpan(0, 1, 30, 0, 0), OrderDueDate = new DateTime(2019, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), OrderQuantity = 200000, OrderRecDate = new DateTime(2019, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified), PartName = "Clip", PartNumber = 2, Profitability = 0m, RawMatlInventoryId = "00244", ScheduleEndTime = new DateTime(2019, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), ScheduleStartTime = new DateTime(2019, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { ShopOrderNumber = 3, Customer = "ACME Solutions", GrossProductionRate = 0m, MachineId = 1, NetProductionRate = 0m, OperationProductionHours = new TimeSpan(0, 2, 30, 0, 0), OperationSetUpHours = new TimeSpan(0, 0, 30, 0, 0), OperationTearDownHours = new TimeSpan(0, 0, 45, 0, 0), OrderDueDate = new DateTime(2019, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), OrderQuantity = 15000, OrderRecDate = new DateTime(2019, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified), PartName = "Washer", PartNumber = 321, Profitability = 0m, RawMatlInventoryId = "00101", ScheduleEndTime = new DateTime(2019, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), ScheduleStartTime = new DateTime(2019, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("AutomatedManagementPilot_AMP.Models.Supervisor", b =>
                {
                    b.Property<int>("SupervisorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationId");

                    b.Property<double>("PayRoll");

                    b.Property<string>("RoleId");

                    b.Property<string>("UserName");

                    b.HasKey("SupervisorId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Supervisor");
                });

            modelBuilder.Entity("AutomatedManagementPilot_AMP.Models.TimeClock", b =>
                {
                    b.Property<int>("TimeClockId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ClockIn");

                    b.Property<DateTime>("ClockOut");

                    b.Property<int>("EmployeeId");

                    b.Property<TimeSpan>("HoursWorked");

                    b.HasKey("TimeClockId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("TimeClock");
                });

            modelBuilder.Entity("AutomatedManagementPilot_AMP.Models.TimeClockSummary", b =>
                {
                    b.Property<int>("TimeClockSumId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Summary");

                    b.Property<int>("TimeClockId");

                    b.HasKey("TimeClockSumId");

                    b.HasIndex("TimeClockId");

                    b.ToTable("TimeClockSummary");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AutomatedManagementPilot_AMP.Models.Employee", b =>
                {
                    b.HasOne("AutomatedManagementPilot_AMP.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationId");
                });

            modelBuilder.Entity("AutomatedManagementPilot_AMP.Models.Machine", b =>
                {
                    b.HasOne("AutomatedManagementPilot_AMP.Models.ShopOrder", "ShopOrder")
                        .WithOne("Machine")
                        .HasForeignKey("AutomatedManagementPilot_AMP.Models.Machine", "ShopOrderNumber")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AutomatedManagementPilot_AMP.Models.Manager", b =>
                {
                    b.HasOne("AutomatedManagementPilot_AMP.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationId");
                });

            modelBuilder.Entity("AutomatedManagementPilot_AMP.Models.Supervisor", b =>
                {
                    b.HasOne("AutomatedManagementPilot_AMP.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Roles")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("AutomatedManagementPilot_AMP.Models.TimeClock", b =>
                {
                    b.HasOne("AutomatedManagementPilot_AMP.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AutomatedManagementPilot_AMP.Models.TimeClockSummary", b =>
                {
                    b.HasOne("AutomatedManagementPilot_AMP.Models.TimeClock", "TimeClock")
                        .WithMany()
                        .HasForeignKey("TimeClockId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AutomatedManagementPilot_AMP.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AutomatedManagementPilot_AMP.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AutomatedManagementPilot_AMP.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AutomatedManagementPilot_AMP.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
