@{
    ViewData["Title"] = "Home Page";
}

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <link href="https://cdn.dhtmlx.com/gantt/edge/dhtmlxgantt.css"
          rel="stylesheet" type="text/css" />
    <script src="https://cdn.dhtmlx.com/gantt/edge/dhtmlxgantt.js"></script>
    <script src="~/codebase/ext/dhtmlxgantt_auto_scheduling.js"></script>
    <script src="~/codebase/dhtmlxgantt.js"></script>
    <script src="~/codebase/ext/dhtmlxgantt_tooltip.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function (event) {
            gantt.config.scale_height = 54;
            gantt.templates.scale_cell_class = function (date) {
                if (date.getDay() == 0 || date.getDay() == 6) {
                    return "weekend";
                }
            };
            gantt.templates.timeline_cell_class = function (task, date) {
                if (date.getDay() == 0 || date.getDay() == 6) {
                    return "weekend";
                }
            };
            gantt.config.scales = [
                { unit: "month", step: 1, format: "%F, %Y" },
                { unit: "day", step: 1, format: "%j, %D" },
                { unit: "hour", step: 1, format: "%H:%i" }
            ];
            gantt.config.fit_tasks = true;
            gantt.config.order_branch = true;
            gantt.config.order_branch_free = true;
            gantt.config.duration_unit = "hour";
            gantt.config.work_time = true;
            gantt.config.correct_work_time = true;
            gantt.config.resource_property = "user_id";
            gantt.setWorkTime({ hours: [0, 24] });
            gantt.setWorkTime({ day: 6, hours: false });
            gantt.setWorkTime({ day: 7, hours: false });
            gantt.config.auto_scheduling = true;
            gantt.config.open_tree_initially = true;

            //gantt.config.auto_scheduling_compatibility = true;
            //gantt.config.auto_scheduling_move_projects = false;
            //gantt.config.auto_scheduling_initial = true;
            //gantt.config.auto_scheduling_strict = true;

            //gantt.config.resource_store = "users";

            //gantt.config.schedule_from_end = true;
            gantt.config.sort = true;



            // specifying the date format
            gantt.config.xml_date = "%Y-%m-%d %H:%i";
            // initializing gantt
            gantt.init("gantt_here");
            // initiating data loading
            gantt.load("/api/data");
            // initializing dataProcessor
            var dp = new gantt.dataProcessor("/api/");
            // and attaching it to gantt
            dp.init(gantt);
            // setting the REST mode for dataProcessor
            dp.setTransactionMode("REST");
            gantt.config.autosize = "xy";
            gantt.config.grid_width = 230;

            gantt.config.columns = [

                { name: "customer", label: "Customer", tree: true, resize: true },
                { name: "text", label: "Task", tree: true, resize: true },
                //{ name: "part_name", label: "Part Name", align: "center", resize: true },
                //{ name: "order_quantity", label: "Order Quantity", align: "center", resize: true },
                { name: "start_date", label: "Start time", align: "center", resize: true },
                { name: "progress", label: "Progress", align: "center", resize: true },
                { name: "duration", label: "Duration", align: "center", resize: true },
                { name: "machine", label: "Machine", align: "center", resize: true },
                { name: "employee", label: "Employee", align: "center", resize: true },
                { name: "add", label: "" },
            ];
            //gantt.config.columns = [
            //    { name: "text", label: "Task Name", tree: true, resize: true },
            //    { name: "start_date", label: "Start time", align: "center", resize: true },
            //    { name: "end_date", label: "End date", align: "center", width: 100, resize: true },
            //    { name: "progress", label: "Progress", align: "center", width: 100, resize: true },
            //    { name: "add", label: "", width: 44 }
            //];

            var text_column = gantt.config.columns[0].label
            if (text_column) text_column += "<div class='gantt_sort gantt_desc'></div>"
            else gantt.config.columns[0].label = "Customer" + "<div class='gantt_sort gantt_desc'></div>"
            gantt.render();

            gantt.serverList("people", [
                { key: 1, label: "John" },
                { key: 2, label: "Mike" }
            ]);

            gantt.serverList("machines", [
                { key: 1, label: "Machine 1" },
                { key: 2, label: "Machine 2" },
            ]);

            gantt.locale.labels.section_details = "Details";
            gantt.locale.labels.section_employee = "Employee";
            gantt.locale.labels.section_machine = "Machine";
            gantt.locale.labels.section_time2 = "Actual Duration";

            gantt.config.lightbox.sections = [
                { name: "description", height: 38, map_to: "text", type: "textarea", focus: true },
                { name: "time2", height: 72, map_to: "auto", type: "duration" },
                { name: "order_quantity", height: 40, map_to: "auto" },
                { name: "time", height: 72, map_to: "auto", time_format: ["%d", "%m", "%Y", "%H:%i"] },
                { name: "machine", height: 22, map_to: "machine", type: "select", options: gantt.serverList("machines") },
                { name: "employee", height: 22, map_to: "employee", type: "select", options: gantt.serverList("people"), default_value: 8 },
                { name: "type", height: 38, type: "typeselect", map_to: "type" }
            ];
            //gantt.config.lightbox.sections = [
            //    { name: "customer", height: 38, map_to: "customer", type: gantt.config.types.project, focus: true },
            //    { name: "employee", map_to: "employee_id", type: "select", options: gantt.serverList("people") },
            //    { name: "machine", map_to: "machine_id", type: "select", options: gantt.serverList("machines") },
            //    { name: "time", type: "duration", map_to: "auto" },
            //    { name: "type", type: "typeselect", map_to: "type" }
            //]
            gantt.config.lightbox.project_sections = [
                { name: "description", height: 70, map_to: "text", type: "textarea", focus: true },
                { name: "type", type: "typeselect", map_to: "type" },
                { name: "time", type: "duration", readonly: true, map_to: "auto" }
            ];

            gantt.eachSuccessor = function (callback, root) {
                if (!this.isTaskExists(root))
                    return;

                // remember tasks we've already iterated in order to avoid infinite loops
                var traversedTasks = arguments[2] || {};
                if (traversedTasks[root])
                    return;
                traversedTasks[root] = true;

                var rootTask = this.getTask(root);
                var links = rootTask.$source;
                if (links) {
                    for (var i = 0; i < links.length; i++) {
                        var link = this.getLink(links[i]);
                        if (this.isTaskExists(link.target) && !traversedTasks[link.target]) {
                            callback.call(this, this.getTask(link.target));

                            // iterate the whole branch, not only first-level dependencies
                            this.eachSuccessor(callback, link.target, traversedTasks);
                        }
                    }
                }
            };
            gantt.attachEvent("onTaskDrag", function (id, mode, task, original) {
                var modes = gantt.config.drag_mode;
                if (mode == modes.move) {
                    var diff = task.start_date - original.start_date;
                    gantt.eachTask(function (child) {
                        child.start_date = new Date(+child.start_date + diff);
                        child.end_date = new Date(+child.end_date + diff);
                        gantt.refreshTask(child.id, true);
                    }, id);
                }
            });
            //rounds positions of the child items to scale
            gantt.attachEvent("onAfterTaskDrag", function (id, mode, e) {
                var modes = gantt.config.drag_mode;
                if (mode == modes.move) {
                    var state = gantt.getState();
                    gantt.eachTask(function (child) {
                        child.start_date = gantt.roundDate({
                            date: child.start_date,
                            unit: state.scale_unit,
                            step: state.scale_step
                        });
                        child.end_date = gantt.calculateEndDate(child.start_date,
                            child.duration, gantt.config.duration_unit);
                        gantt.updateTask(child.id);
                    }, id);
                }
            });


            gantt.attachEvent("onLightboxSave", function (id, job, is_new) {
                gantt.message({ text: "on Lightbox Save" + " " + job.text, expire: 10000 });
                return true;
            })
            gantt.attachEvent("onAfterLightbox", function () {
                gantt.message({ text: "on After Lightbox", expire: 10000 });
            });
            gantt.attachEvent("onBeforeLightbox", function (id) {
                previous_state = JSON.parse(JSON.stringify(gantt.serialize().data))
                return true;
            });
            gantt.attachEvent("onBeforeTaskDrag", function (id, mode, e) {
                previous_state = JSON.parse(JSON.stringify(gantt.serialize().data))
                return true;
            });
            gantt.attachEvent("onAfterTaskUpdate", function (id, item) {
                var current_state = JSON.parse(JSON.stringify(gantt.serialize().data));
                for (var i = 0; i < previous_state.length; i++) {
                    for (var j = 0; j < current_state.length; j++) {
                        if (current_state[j].id == previous_state[i].id) {
                            if (current_state[j].start_date != previous_state[i].start_date || current_state[j].end_date != previous_state[i].end_date) {
                                gantt.message(current_state[j].text + " was updated")
                            }
                        }
                    }
                }
            });
            gantt.attachEvent("onBeforeAutoSchedule", function (taskId, updatedTasks) {
                gantt.message({ text: "|| onBeforeAutoSchedule ||", expire: 10000 });
            });


            gantt.attachEvent("onAfterAutoSchedule", function (taskId, updatedTasks) {
                gantt.message({ text: "|| onAfterAutoSchedule ||", expire: 10000 });
            });


            //gantt.attachEvent("onAfterTaskAutoSchedule", function (task, new_date, link, predecessor) {
            //    var reason = "";
            //    if (predecessor) {
            //        reason = predecessor.text;
            //    } else {
            //        var constraint = gantt.getConstraintType(task);
            //        reason = gantt.locale.labels[constraint];
            //    }
            //    var predecessor = predecessor ? predecessor : { text: task.constraint_type };
            //    console.log("<b>" + task.text + "</b> has been rescheduled to " + gantt.templates.task_date(new_date) + " due to <b>" + reason + "</b> constraint");
            //});
        });
    </script>

</head>
<body>
    <div id="gantt_here" style="width:100%; height:100%;"></div>

</body>
</html>